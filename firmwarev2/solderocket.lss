
solderocket.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  0000019a  0000020e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000019a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000012  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000254  2**2
                  CONTENTS, READONLY, OCTETS
  4 .debug_aranges 00000028  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_info   00000909  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_abbrev 00000797  00000000  00000000  00000bc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_line   00000443  00000000  00000000  00001358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_frame  00000034  00000000  00000000  0000179c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_str    0000043d  00000000  00000000  000017d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_loc    00000197  00000000  00000000  00001c0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_ranges 00000060  00000000  00000000  00001da4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	44 c0       	rjmp	.+136    	; 0x8e <__bad_interrupt>
   6:	00 00       	nop
   8:	42 c0       	rjmp	.+132    	; 0x8e <__bad_interrupt>
   a:	00 00       	nop
   c:	40 c0       	rjmp	.+128    	; 0x8e <__bad_interrupt>
   e:	00 00       	nop
  10:	3e c0       	rjmp	.+124    	; 0x8e <__bad_interrupt>
  12:	00 00       	nop
  14:	3c c0       	rjmp	.+120    	; 0x8e <__bad_interrupt>
  16:	00 00       	nop
  18:	3a c0       	rjmp	.+116    	; 0x8e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	38 c0       	rjmp	.+112    	; 0x8e <__bad_interrupt>
  1e:	00 00       	nop
  20:	36 c0       	rjmp	.+108    	; 0x8e <__bad_interrupt>
  22:	00 00       	nop
  24:	34 c0       	rjmp	.+104    	; 0x8e <__bad_interrupt>
  26:	00 00       	nop
  28:	32 c0       	rjmp	.+100    	; 0x8e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	30 c0       	rjmp	.+96     	; 0x8e <__bad_interrupt>
  2e:	00 00       	nop
  30:	2e c0       	rjmp	.+92     	; 0x8e <__bad_interrupt>
  32:	00 00       	nop
  34:	2c c0       	rjmp	.+88     	; 0x8e <__bad_interrupt>
  36:	00 00       	nop
  38:	2a c0       	rjmp	.+84     	; 0x8e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	28 c0       	rjmp	.+80     	; 0x8e <__bad_interrupt>
  3e:	00 00       	nop
  40:	26 c0       	rjmp	.+76     	; 0x8e <__bad_interrupt>
  42:	00 00       	nop
  44:	24 c0       	rjmp	.+72     	; 0x8e <__bad_interrupt>
  46:	00 00       	nop
  48:	22 c0       	rjmp	.+68     	; 0x8e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	20 c0       	rjmp	.+64     	; 0x8e <__bad_interrupt>
  4e:	00 00       	nop
  50:	1e c0       	rjmp	.+60     	; 0x8e <__bad_interrupt>
  52:	00 00       	nop
  54:	1c c0       	rjmp	.+56     	; 0x8e <__bad_interrupt>
  56:	00 00       	nop
  58:	1a c0       	rjmp	.+52     	; 0x8e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	18 c0       	rjmp	.+48     	; 0x8e <__bad_interrupt>
  5e:	00 00       	nop
  60:	16 c0       	rjmp	.+44     	; 0x8e <__bad_interrupt>
  62:	00 00       	nop
  64:	14 c0       	rjmp	.+40     	; 0x8e <__bad_interrupt>
  66:	00 00       	nop

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e9       	ldi	r30, 0x9A	; 154
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 33       	cpi	r26, 0x32	; 50
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	17 d0       	rcall	.+46     	; 0xba <main>
  8c:	84 c0       	rjmp	.+264    	; 0x196 <_exit>

0000008e <__bad_interrupt>:
  8e:	b8 cf       	rjmp	.-144    	; 0x0 <__vectors>

00000090 <ReadADC>:
}

uint16_t ReadADC(uint8_t ADCchannel)
{
 //select ADC channel with safety mask
 ADMUX = (ADMUX & 0xF0) | (ADCchannel & 0x0F);
  90:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
  94:	90 7f       	andi	r25, 0xF0	; 240
  96:	8f 70       	andi	r24, 0x0F	; 15
  98:	98 2b       	or	r25, r24
  9a:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 //single conversion mode
 ADCSRA |= (1<<ADSC);
  9e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  a2:	80 64       	ori	r24, 0x40	; 64
  a4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 // wait until ADC conversion is complete
 while( ADCSRA & (1<<ADSC) );
  a8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  ac:	86 fd       	sbrc	r24, 6
  ae:	fc cf       	rjmp	.-8      	; 0xa8 <ReadADC+0x18>
 return ADC;
  b0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  b4:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
  b8:	08 95       	ret

000000ba <main>:
 ADMUX = (1<<REFS0);
  ba:	80 e4       	ldi	r24, 0x40	; 64
  bc:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)|(1<<ADEN);    
  c0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  c4:	87 68       	ori	r24, 0x87	; 135
  c6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
};

int main(void)
{
	InitADC();
	DDRC=0x04;
  ca:	84 e0       	ldi	r24, 0x04	; 4
  cc:	87 b9       	out	0x07, r24	; 7
	PORTC=0x00;
  ce:	18 b8       	out	0x08, r1	; 8
	DDRD=0xFF;
  d0:	8f ef       	ldi	r24, 0xFF	; 255
  d2:	8a b9       	out	0x0a, r24	; 10
	PORTD=0x00;
  d4:	1b b8       	out	0x0b, r1	; 11
	DDRB=0xFF;
  d6:	84 b9       	out	0x04, r24	; 4
	PORTB=0x00;
  d8:	15 b8       	out	0x05, r1	; 5
	DIDR0=0x01;
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
	uint8_t lastbutton = 0;	
  e0:	10 e0       	ldi	r17, 0x00	; 0
	while(1)
	{
		uint8_t setting;
		setting = ReadADC(0)/93; // 11 values 0-10
  e2:	cd e5       	ldi	r28, 0x5D	; 93
  e4:	d0 e0       	ldi	r29, 0x00	; 0
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	d3 df       	rcall	.-90     	; 0x90 <ReadADC>
  ea:	be 01       	movw	r22, r28
  ec:	40 d0       	rcall	.+128    	; 0x16e <__udivmodhi4>
		if (setting == 11)
  ee:	6b 30       	cpi	r22, 0x0B	; 11
  f0:	09 f4       	brne	.+2      	; 0xf4 <main+0x3a>
			setting=10;
  f2:	6a e0       	ldi	r22, 0x0A	; 10

		uint8_t currbutton;
		currbutton = PINC&0x02;
  f4:	96 b1       	in	r25, 0x06	; 6
  f6:	92 70       	andi	r25, 0x02	; 2
		if (lastbutton != currbutton)
  f8:	19 17       	cp	r17, r25
  fa:	61 f0       	breq	.+24     	; 0x114 <main+0x5a>
		{
			if (!currbutton)
  fc:	91 11       	cpse	r25, r1
  fe:	1d c0       	rjmp	.+58     	; 0x13a <main+0x80>
				if(setting < 10)
				{
					uint16_t delay=delays[setting]; //don't reread
					for(uint16_t count=delay;count;count--)
						_delay_ms(1); // needs compile time value
					PORTC&=~(1<<2);
 100:	42 98       	cbi	0x08, 2	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 102:	ff ef       	ldi	r31, 0xFF	; 255
 104:	20 e7       	ldi	r18, 0x70	; 112
 106:	32 e0       	ldi	r19, 0x02	; 2
 108:	f1 50       	subi	r31, 0x01	; 1
 10a:	20 40       	sbci	r18, 0x00	; 0
 10c:	30 40       	sbci	r19, 0x00	; 0
 10e:	e1 f7       	brne	.-8      	; 0x108 <main+0x4e>
 110:	00 c0       	rjmp	.+0      	; 0x112 <main+0x58>
 112:	00 00       	nop
			};
			lastbutton = currbutton;
			_delay_ms(50);
		};
		
		for(uint8_t led=0;led<10;led++)
 114:	e4 e1       	ldi	r30, 0x14	; 20
 116:	f1 e0       	ldi	r31, 0x01	; 1
 118:	20 e0       	ldi	r18, 0x00	; 0
			if((setting == 10) ? 1 : (setting == led))
				*LEDS[led].port|=LEDS[led].mask;
			else
				*LEDS[led].port&=~LEDS[led].mask;
 11a:	a0 81       	ld	r26, Z
 11c:	b1 81       	ldd	r27, Z+1	; 0x01
 11e:	82 81       	ldd	r24, Z+2	; 0x02
				*LEDS[led].port|=LEDS[led].mask;
 120:	3c 91       	ld	r19, X
			if((setting == 10) ? 1 : (setting == led))
 122:	6a 30       	cpi	r22, 0x0A	; 10
 124:	11 f0       	breq	.+4      	; 0x12a <main+0x70>
 126:	62 13       	cpse	r22, r18
 128:	1f c0       	rjmp	.+62     	; 0x168 <main+0xae>
				*LEDS[led].port|=LEDS[led].mask;
 12a:	83 2b       	or	r24, r19
				*LEDS[led].port&=~LEDS[led].mask;
 12c:	8c 93       	st	X, r24
		for(uint8_t led=0;led<10;led++)
 12e:	2f 5f       	subi	r18, 0xFF	; 255
 130:	33 96       	adiw	r30, 0x03	; 3
 132:	2a 30       	cpi	r18, 0x0A	; 10
 134:	91 f7       	brne	.-28     	; 0x11a <main+0x60>
		currbutton = PINC&0x02;
 136:	19 2f       	mov	r17, r25
 138:	d6 cf       	rjmp	.-84     	; 0xe6 <main+0x2c>
				PORTC|=(1<<2);
 13a:	42 9a       	sbi	0x08, 2	; 8
				if(setting < 10)
 13c:	6a 30       	cpi	r22, 0x0A	; 10
 13e:	08 f7       	brcc	.-62     	; 0x102 <main+0x48>
					uint16_t delay=delays[setting]; //don't reread
 140:	e6 2f       	mov	r30, r22
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	ee 0f       	add	r30, r30
 146:	ff 1f       	adc	r31, r31
 148:	e0 50       	subi	r30, 0x00	; 0
 14a:	ff 4f       	sbci	r31, 0xFF	; 255
 14c:	20 81       	ld	r18, Z
 14e:	31 81       	ldd	r19, Z+1	; 0x01
					for(uint16_t count=delay;count;count--)
 150:	21 15       	cp	r18, r1
 152:	31 05       	cpc	r19, r1
 154:	a9 f2       	breq	.-86     	; 0x100 <main+0x46>
 156:	ef e9       	ldi	r30, 0x9F	; 159
 158:	ff e0       	ldi	r31, 0x0F	; 15
 15a:	31 97       	sbiw	r30, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <main+0xa0>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <main+0xa6>
 160:	00 00       	nop
 162:	21 50       	subi	r18, 0x01	; 1
 164:	31 09       	sbc	r19, r1
 166:	f4 cf       	rjmp	.-24     	; 0x150 <main+0x96>
				*LEDS[led].port&=~LEDS[led].mask;
 168:	80 95       	com	r24
 16a:	83 23       	and	r24, r19
 16c:	df cf       	rjmp	.-66     	; 0x12c <main+0x72>

0000016e <__udivmodhi4>:
 16e:	aa 1b       	sub	r26, r26
 170:	bb 1b       	sub	r27, r27
 172:	51 e1       	ldi	r21, 0x11	; 17
 174:	07 c0       	rjmp	.+14     	; 0x184 <__udivmodhi4_ep>

00000176 <__udivmodhi4_loop>:
 176:	aa 1f       	adc	r26, r26
 178:	bb 1f       	adc	r27, r27
 17a:	a6 17       	cp	r26, r22
 17c:	b7 07       	cpc	r27, r23
 17e:	10 f0       	brcs	.+4      	; 0x184 <__udivmodhi4_ep>
 180:	a6 1b       	sub	r26, r22
 182:	b7 0b       	sbc	r27, r23

00000184 <__udivmodhi4_ep>:
 184:	88 1f       	adc	r24, r24
 186:	99 1f       	adc	r25, r25
 188:	5a 95       	dec	r21
 18a:	a9 f7       	brne	.-22     	; 0x176 <__udivmodhi4_loop>
 18c:	80 95       	com	r24
 18e:	90 95       	com	r25
 190:	bc 01       	movw	r22, r24
 192:	cd 01       	movw	r24, r26
 194:	08 95       	ret

00000196 <_exit>:
 196:	f8 94       	cli

00000198 <__stop_program>:
 198:	ff cf       	rjmp	.-2      	; 0x198 <__stop_program>
